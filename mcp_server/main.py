# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:44:57+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyQuery, BaseSecurity
from fastapi import Path

from models import ConceptType, Fields
from models.Name_concept_type__specific_concept_ import JsonGetResponse
from models.Search import JsonGetResponse

app = MCPProxy(
    description='The Semantic API complements the Articles API. With the Semantic API, you get access to the long list of people, places, organizations and other locations, entities and descriptors that make up the controlled vocabulary used as metadata by The New York Times (sometimes referred to as Times Tags and used for Times Topics pages).\n\nThe Semantic API uses concepts which are, by definition, terms in The New York Times controlled vocabulary. Like the way facets are used in the Articles API, concepts are a good way to uncover articles of interest in The New York Times archive, and at the same time, limit the scope and number of those articles. The Semantic API maps to external semantic data resources, in a fashion consistent with the idea of linked data. The Semantic API also provides combination and relationship information to other, similar concepts in The New York Times controlled vocabulary.\n',
    termsOfService='http://developer.nytimes.com/tou',
    title='Semantic API',
    version='2.0.0',
    servers=[
        {'url': 'http://api.nytimes.com/svc/semantic/v2/concept'},
        {'url': 'https://api.nytimes.com/svc/semantic/v2/concept'},
    ],
)


@app.get(
    '/name/{concept-type}/{specific-concept}.json',
    tags=['concept_retrieval', 'search_query_handling'],
    security=[
        APIKeyQuery(name="api-key"),
    ],
)
def get_name__concept_type__specific_concept_json(
    concept_type: ConceptType = Path(..., alias='concept-type'),
    specific_concept: str = Path(..., alias='specific-concept'),
    fields: Optional[Fields] = None,
    query: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/search.json',
    tags=['concept_retrieval', 'search_query_handling'],
    security=[
        APIKeyQuery(name="api-key"),
    ],
)
def get_search_json(
    query: str, offset: Optional[int] = 10, fields: Optional[Fields] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
